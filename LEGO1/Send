lego/legoomni/src/actors/jukeboxentity.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/actors/jukeboxentity.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/actors/radio.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/actors/radio.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/actors/skateboard.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/audio/mxbackgroundaudiomanager.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/audio/mxbackgroundaudiomanager.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/build/buildingentity.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/build/buildingentity.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/common/legogamestate.cpp:				NotificationManager()->Send(world, &param);
lego/legoomni/src/common/legogamestate.cpp:			NotificationManager()->Send(world, &MxNotificationParam(c_notificationType20, NULL));
lego/legoomni/src/common/legoutils.cpp:			NotificationManager()->Send(entity, &param);
lego/legoomni/src/common/legoutils.cpp:		NotificationManager()->Send(entity, &MxNotificationParam(c_notificationType0, p_sender));
lego/legoomni/src/entity/act2policestation.cpp:		NotificationManager()->Send(CurrentWorld(), &MxNotificationParam(c_notificationType23, NULL));
lego/legoomni/src/entity/legojetski.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/entity/legoworld.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/entity/legoworld.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/entity/legoworldpresenter.cpp:			NotificationManager()->Send(m_entity, &param);
lego/legoomni/src/entity/legoworldpresenter.cpp:		NotificationManager()->Send(m_entity, &MxNotificationParam(c_notificationNewPresenter, NULL));
lego/legoomni/src/main/legoomni.cpp:		NotificationManager()->Send(m_currentWorld, p_param);
lego/legoomni/src/race/legorace.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/race/legoracecar.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/elevatorbottom.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/elevatorbottom.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/gasstation.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/gasstation.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/historybook.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/hospital.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/hospital.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/infocenter.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/infocenter.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/infocenterdoor.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/infocenterdoor.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/isle.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/isle.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/isle.cpp:				NotificationManager()->Send(this, &param);
lego/legoomni/src/worlds/isle.cpp:			NotificationManager()->Send(this, &MxNotificationParam(c_notificationTransitioned, NULL));
lego/legoomni/src/worlds/isle.cpp:				NotificationManager()->Send(this, &param);
lego/legoomni/src/worlds/isle.cpp:			NotificationManager()->Send(this, &MxNotificationParam(c_notificationTransitioned, NULL));
lego/legoomni/src/worlds/isle.cpp:				NotificationManager()->Send(this, &param);
lego/legoomni/src/worlds/isle.cpp:			NotificationManager()->Send(this, &MxNotificationParam(c_notificationTransitioned, NULL));
lego/legoomni/src/worlds/isle.cpp:				NotificationManager()->Send(this, &param);
lego/legoomni/src/worlds/isle.cpp:			NotificationManager()->Send(this, &MxNotificationParam(c_notificationTransitioned, NULL));
lego/legoomni/src/worlds/isle.cpp:			NotificationManager()->Send(this, &param);
lego/legoomni/src/worlds/isle.cpp:		NotificationManager()->Send(this, &MxNotificationParam(c_notificationTransitioned, NULL));
lego/legoomni/src/worlds/jukebox.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/jukebox.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/police.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/police.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/registrationbook.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/registrationbook.cpp:	NotificationManager()->Unregister(this);
lego/legoomni/src/worlds/score.cpp:	NotificationManager()->Register(this);
lego/legoomni/src/worlds/score.cpp:	NotificationManager()->Unregister(this);
omni/src/common/mxcompositepresenter.cpp:	NotificationManager()->Register(this);
omni/src/common/mxcompositepresenter.cpp:	NotificationManager()->Unregister(this);
omni/src/common/mxcompositepresenter.cpp:			NotificationManager()->Send(action->GetOrigin(), &param);
omni/src/common/mxcompositepresenter.cpp:		NotificationManager()->Send(
omni/src/common/mxcompositepresenter.cpp:		NotificationManager()->Send(this, &p_param);
omni/src/common/mxmediapresenter.cpp:				NotificationManager()->Send(action->GetOrigin(), &param);
omni/src/common/mxmediapresenter.cpp:			NotificationManager()->Send(
omni/src/common/mxpresenter.cpp:			NotificationManager()->Send(m_compositePresenter, &param);
omni/src/common/mxpresenter.cpp:		NotificationManager()->Send(m_compositePresenter, &MxNotificationParam(c_notificationPresenter, this));
omni/src/main/mxomni.cpp:						NotificationManager()->Send(sender, &param);
omni/src/main/mxomni.cpp:					NotificationManager()->Send(sender, &MxType4NotificationParam(this, &p_action, object));
omni/src/main/mxomni.cpp:						NotificationManager()->Send(p_action.GetUnknown84(), &param);
omni/src/main/mxomni.cpp:					NotificationManager()->Send(
omni/src/stream/mxstreamer.cpp:	NotificationManager()->Register(this);
omni/src/stream/mxstreamer.cpp:	NotificationManager()->Unregister(this);
omni/src/stream/mxstreamer.cpp:					NotificationManager()->Send(this, &notification);
omni/src/stream/mxstreamer.cpp:				NotificationManager()->Send(this, &MxStreamerNotification(c_notificationStreamer, NULL, c));
omni/src/stream/mxstreamer.cpp:				NotificationManager()->Send(this, &notification);
omni/src/stream/mxstreamer.cpp:			NotificationManager()->Send(this, &MxStreamerNotification(c_notificationStreamer, NULL, c));
